#!/usr/bin/env bash

# Config
# ------
# hooks.post-receive-replace.source
#   A value that depicts what part of the source to replace the
#   project with. The path should be written relative to the
#   source root. Default value is `.`
# hooks.post-receive-replace.target
#   A required value depicting the path where the original prejct
#   lies. Ie: /home/website/html
#

# --- Creates a temporary project from a given repository
# @param string The git reference name to use.
# @param string The path where to create the project.
create_tmp_project()
{
  ref_name=$1
  export_dir=$2
  mkdir -p $export_dir
  git archive -o $export_dir.tar $ref_name || exit 1
  tar -xf $export_dir.tar -C $export_dir
  rm $export_dir.tar
}

# --- Replaces one directory with another.
# @param string The source directory
# @param string The destination directory
replace_project()
{
  source_dir=$1
  target_dir=$2
  rm -rf $target_dir
  mv $source_dir $target_dir
}

# --- Replaces a target directory with part of the repository
#     (a git reference and a source path).
# @param string The git reference
# @param string A temporary path to export to
# @param string The relative path of the repository
# @param string The target directory to replace
post_receive()
{
  ref_name=$1
  export_dir=$2
  source_dir=$3
  target_dir=$4
  if [[ $source_dir == . ]]
  then
    source_dir=$export_dir
  else
    source_dir=$export_dir/$source_dir
  fi
  create_tmp_project $ref_name $export_dir
  [ -d $source_dir ] && replace_project $source_dir $target_dir
  rm -rf $export_dir
}

# Get configuration.
export_dir=/tmp/$$
target_dir=`git config hooks.post-receive-replace.target`
source_dir=`git config hooks.post-receive-replace.source`
read old_rev new_rev ref_name

# Dispatch process if there's enough configuration
if [ -n $ref_name -a -d $target_dir ]
then
  echo "$ref_name/$source_dir >>> $target_dir"
  post_receive $ref_name $export_dir $source_dir $target_dir
fi

